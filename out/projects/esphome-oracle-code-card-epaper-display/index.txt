1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
6:I[9665,[],"OutletBoundary"]
8:I[4911,[],"AsyncMetadataOutlet"]
a:I[9665,[],"ViewportBoundary"]
c:I[9665,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[8393,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/931b179cff3131dc.css","style"]
:HL["/_next/static/css/f56e075401be6041.css","style"]
:HL["/_next/static/css/9a9da5edf348b99b.css","style"]
:HL["/_next/static/css/b9c247a1f9d5af8a.css","style"]
:HL["/_next/static/css/f055e431c58b907b.css","style"]
0:{"P":null,"b":"TG4hPXCIULUzHw9zDRHXT","p":"","c":["","projects","esphome-oracle-code-card-epaper-display",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","esphome-oracle-code-card-epaper-display","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/931b179cff3131dc.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/f56e075401be6041.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/x-icon","href":"/favicon.ico"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon-180x180.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"152x152","href":"/apple-touch-icon-152x152.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"144x144","href":"/apple-touch-icon-144x144.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"120x120","href":"/apple-touch-icon-120x120.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"114x114","href":"/apple-touch-icon-114x114.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/apple-touch-icon-76x76.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"72x72","href":"/apple-touch-icon-72x72.png"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"57x57","href":"/apple-touch-icon-57x57.png"}],["$","link",null,{"rel":"apple-touch-icon","href":"/apple-touch-icon.png"}],["$","link",null,{"rel":"stylesheet","href":"/style.css"}],["$","link",null,{"rel":"stylesheet","href":"/font-awesome.css"}]]}],["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$L4",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9a9da5edf348b99b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b9c247a1f9d5af8a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","esphome-oracle-code-card-epaper-display","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9a9da5edf348b99b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b9c247a1f9d5af8a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/f055e431c58b907b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"Michael Lunzer"}],["$","meta","1",{"name":"description","content":"Personal Site"}],["$","meta","2",{"name":"author","content":"@michaellunzer"}],["$","meta","3",{"name":"robots","content":"index, follow"}],["$","meta","4",{"property":"og:title","content":"Michael Lunzer"}],["$","meta","5",{"property":"og:description","content":"Personal Site"}],["$","meta","6",{"property":"og:url","content":"https://www.michaellunzer.com/"}],["$","meta","7",{"property":"og:site_name","content":"Michael Lunzer"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:title","content":"Michael Lunzer"}],["$","meta","10",{"name":"twitter:description","content":"Personal Site"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
10:I[6290,["242","static/chunks/242-9ab8df8e28059c50.js","63","static/chunks/63-b8ba2254fb9ac97a.js","231","static/chunks/231-25f0858d523e67a4.js","734","static/chunks/734-311fc7453e9da4aa.js","419","static/chunks/app/projects/%5Bslug%5D/page-821d249a48c9d38a.js"],"default"]
11:I[6874,["242","static/chunks/242-9ab8df8e28059c50.js","63","static/chunks/63-b8ba2254fb9ac97a.js","893","static/chunks/app/projects/page-d3b0f5d0cba51f61.js"],"*"]
4:["$","$L10",null,{"siteInfo":{"metadata":{"tags":[],"concepts":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"o4gibwve10tr"}},"id":"1vaZauN3G1LbRsJutH3AU9","type":"Entry","createdAt":"2020-05-28T21:29:56.813Z","updatedAt":"2022-04-19T07:19:17.934Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"publishedVersion":45,"revision":18,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"siteInformation"}},"locale":"en-US"},"fields":{"siteName":"Michael Lunzer","siteUrl":"https://michaellunzer.com","logo":{"metadata":{"tags":[],"concepts":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"o4gibwve10tr"}},"id":"7yHuAa09NVOcZ25POk7cbM","type":"Asset","createdAt":"2020-05-28T21:29:46.445Z","updatedAt":"2020-07-03T23:34:40.696Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"publishedVersion":35,"revision":10,"locale":"en-US"},"fields":{"title":"ML-logo-white","file":{"url":"//images.ctfassets.net/o4gibwve10tr/7yHuAa09NVOcZ25POk7cbM/9b2cb1a82fcec0461a26b030df8ed159/ML-logo-white.png","details":{"size":31304,"image":{"width":319,"height":302}},"fileName":"ML-logo-white.png","contentType":"image/png"}}},"twiteerHandle":"@michaellunzer","siteDescription":"Personal Site","menus":["Blogs","Photos","About","Contact","Work","Map","Resume","Projects","Bucket List","Spotify"]}},"children":[null,["$","div",null,{"className":"site-container","children":["$","div",null,{"className":"container","children":["$","div",null,{"className":"row","children":["$","div",null,{"className":"col-sm-12 text-center","children":[["$","h1",null,{"children":"404 - Page Not Found"}],["$","p",null,{"children":"The page you're looking for doesn't exist."}],["$","$L11",null,{"href":"/","className":"btn btn-primary","children":"Go back home"}]]}]}]}]}]]}]
12:I[3063,["242","static/chunks/242-9ab8df8e28059c50.js","63","static/chunks/63-b8ba2254fb9ac97a.js","231","static/chunks/231-25f0858d523e67a4.js","734","static/chunks/734-311fc7453e9da4aa.js","419","static/chunks/app/projects/%5Bslug%5D/page-821d249a48c9d38a.js"],"Image"]
13:I[2584,["242","static/chunks/242-9ab8df8e28059c50.js","63","static/chunks/63-b8ba2254fb9ac97a.js","231","static/chunks/231-25f0858d523e67a4.js","734","static/chunks/734-311fc7453e9da4aa.js","419","static/chunks/app/projects/%5Bslug%5D/page-821d249a48c9d38a.js"],"default"]
14:T551b,I'm a big fan of ePaper displays - it's easier on the eyes compared to LED based displays and is great for low powered devices like Pebble Watches and Kindle eBook readers. 

I'm using an [Oracle Code Card](https://hackaday.com/2018/10/31/corporate-badgelife-oracles-code-card/) badge [I got at a conference](https://learncodeshare.net/2019/09/24/you-went-to-oracle-open-world-19-and-got-a-code-card-now-what/). It has a 2.7 inch display and is based on [the $29 badgy](https://www.tindie.com/products/squarofumi/badgy-iot-badge/) if you want to do this project yourself.

# Finished Product:
![codecard](//images.ctfassets.net/o4gibwve10tr/3Ry5sZT37UtzGqutwEQ9w8/3e65e7a82360037de701fc37d9dbbc35/IMG_4272.jpeg)

# The Setup:

You need to add a couple sensors to home assistant first. You can find the specific file [here](https://github.com/fredrike/esphome-nodes/blob/master/homeassistant-config/package-display_node.yaml) in @fredrike's github page. Add this file to your packages folder inside your config folder. (here: `~/config/packages`). If you don't already have a packages folder, make sure to include this line under the `homeassistant:` header like so:

 ```yaml
 homeassistant:
   packages: !include_dir_named packages
 ```

# Home Assistant Configuration:
the blank " " squares you see in the config are [Material Design Icons](https://cdn.materialdesignicons.com/5.4.55/). Sometimes the icons get lost in translation when copy/pasting them.  

If you're unable to copy/paste the code below and retain the Material Design Icons, try copying/pasting from here: 

https://github.com/fredrike/esphome-nodes/blob/master/homeassistant-config/package-display_node.yaml

If that doesn't work, most of them are commented, so you can copy/paste each individual one from here: [Material Design Icons](https://cdn.materialdesignicons.com/5.4.55/).

`~/config/packages/display_node.yaml`

```yaml
sensor:
  - platform: moon
  - platform: template
    sensors:
      moon_tpl:
        entity_id: sensor.moon
        value_template: >-
          {% set map = {
            "new_moon": "󰽤",
            "waxing_crecent": "󰽧",
            "first_quarter": "󰽡",
            "waxing_gibbous": "󰽨",
            "full_moon": "󰽢",
            "waning_gibbous": "󰽦",
            "last_quarter": "󰽣",
            "waning_crescent": "󰽥"
          } %}
          {{- map[states('sensor.moon')] -}}
  - platform: template
    sensors:
      forecast_today:
        entity_id: sensor.time
        value_template: >-
          {% set weather = {
            "clear-day": "󰖙", 
            "clear-night": "󰖔", 
            "cloudy": "󰖐", 
            "rain": "󰖖", 
            "sleet": "󰙿", 
            "snow": "󰼶", 
            "wind": "󰖞", 
            "fog": "󰖑", 
            "partly-cloudy-day": "󰖕", 
            "partly-cloudy-night": "󰼱" 
          } %}
          {% set base = 'sensor.dark_sky_forecast_' %}

          {{- weather[states('{}icon_{}d'.format(base, 0))] -}};
          {{- states('{}apparent_temperature'.format(base)) -}}°;
          {{- states('{}precip_probability_{}d'.format(base, 0))|int -}}
  - platform: darksky #https://pastebin.com/iX7u4ZSg
    api_key: !secret darksky_api_key
    name: dark_sky_forecast
    scan_interval: '00:10'
    forecast:
      - 0
      - 1
      - 2
      - 3
      - 4
    monitored_conditions:
      - icon
      - temperature
      - apparent_temperature
      - temperature_high
      - temperature_low
      - precip_probability
      - precip_intensity
  - platform: template
    sensors:
      forecast:
        entity_id: sensor.time
        value_template: >-
          {% set dow = {
           0: "Mon",
           1: "Tue",
           2: "Wed",
           3: "Thu",
           4: "Fri",
           5: "Sat",
           6: "Sun"
          } %}

          {% set weather = {
            "clear-day": "mdi:weather-sunny",
            "clear-night": "mdi:weather-night",
            "cloudy": "mdi:weather-cloudy",
            "rain": "mdi:weather-pouring",
            "sleet": "mdi:weather-snowy-rainy",
            "snow": "mdi:weather-snowy",
            "wind": "mdi:weather-windy",
            "fog": "mdi:weather-fog",
            "partly-cloudy-day": "mdi:weather-partly-cloudy",
            "partly-cloudy-night": "mdi:weather-night-partly-cloudy"
          } %}
          {% set weather = {
            "clear-day": "󰖙", 
            "clear-night": "󰖔", 
            "cloudy": "󰖐", 
            "rain": "󰖖", 
            "sleet": "󰙿", 
            "snow": "󰼶", 
            "wind": "󰖞", 
            "fog": "󰖑", 
            "partly-cloudy-day": "󰖕", 
            "partly-cloudy-night": "󰼱" 
          } %}

          {% set base = 'sensor.dark_sky_forecast_' %}

          {%- for i in [ 1, 2, 3, 4] -%}
            {{ dow[(now().weekday() + i) % 7]  }};
            {{- weather[states('{}icon_{}d'.format(base, i))] -}};
            {{- states('{}daytime_high_temperature_{}d'.format(base, i))|int
            -}}°/
            {{- states('{}overnight_low_temperature_{}d'.format(base, i))|int -}}°;
            {{- states('{}precip_probability_{}d'.format(base, i))|int -}}%
            {%- if not loop.last %};{% endif %}
          {%- endfor %}
```

# ESPHome Code: 

If you're unable to copy/paste the code below and retain the Material Design Icons, try copying/pasting from here: 

https://gist.github.com/michaellunzer/37f29462ee9a17f22978e672c59e440c

```yaml
esphome:
  name: codecard3
  platform: ESP8266
  board: esp12e
  # on_boot:
  #     - output.turn_off: onboard_led

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13

# s= '@!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz.'
# print([','.join(_) for _ in s])

font:
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: clock_font
    size: 45
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']
  - file: 'fonts/Google_Sans_Medium.ttf'
    id: temp_font
    size: 32
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: status_font
    size: 18
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']
  - file: 'fonts/Google_Sans_Medium.ttf'
    id: aqi_font
    size: 18
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 32
    glyphs: [
      '󰢙', # mdi-account-heart
      '󰔏', # mdi-thermometer
      '󱄷', # mdi-fire-hydrant
      "󰕊", # mdi-umbrella
      "󰽕", # mdi-home-thermometer-outline
      "󰽔", # mdi-home-thermometer
      "󰵃", # mdi-air-filter
      # Wifi
      '󰤯', # mdi-wifi-strength-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      # Weather
      "󰖙", # mdi-weather-sunny
      "󰖔", # mdi-weather-night
      "󰖐", # mdi-weather-cloudy
      "󰖖", # mdi-weather-pouring
      "󰙿", # mdi-weather-snowy-rainy
      "󰼶", # mdi-weather-snowy-heavy
      "󰖞", # mdi-weather-windy-variant
      "󰖑", # mdi-weather-fog
      "󰼱", # mdi-weather-night-partly-cloudy
      "󰖕", # mdi-weather-partly-cloudy
      # Moon
      "󰽤", # new_moon
      "󰽧", # waxing_crecent
      "󰽡", # first_quarter
      "󰽨", # waxing_gibbous
      "󰽢", # full_moon
      "󰽦", # waning_gibbous
      "󰽣", # last_quarter
      "󰽥", # waning_crescent
      # Sun
      "󰖛", # mdi-weather-sunset-down
      "󰖜", # mdi-weather-sunset-up
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 50
    glyphs: [
      '󰢙', # mdi-account-heart
      '󰔏', # mdi-thermometer
      '󱄷', # mdi-fire-hydrant
      "󰕊", # mdi-umbrella
      "󰽕", # mdi-home-thermometer-outline
      "󰽔", # mdi-home-thermometer
      "󰵃", # mdi-air-filter
      # Wifi
      '󰤯', # mdi-wifi-strength-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      # Weather
      "󰖙", # mdi-weather-sunny
      "󰖔", # mdi-weather-night
      "󰖐", # mdi-weather-cloudy
      "󰖖", # mdi-weather-pouring
      "󰙿", # mdi-weather-snowy-rainy
      "󰼶", # mdi-weather-snowy-heavy
      "󰖞", # mdi-weather-windy-variant
      "󰖑", # mdi-weather-fog
      "󰼱", # mdi-weather-night-partly-cloudy
      "󰖕", # mdi-weather-partly-cloudy
      # Moon
      "󰽤", # new_moon
      "󰽧", # waxing_crecent
      "󰽡", # first_quarter
      "󰽨", # waxing_gibbous
      "󰽢", # full_moon
      "󰽦", # waning_gibbous
      "󰽣", # last_quarter
      "󰽥", # waning_crescent
      # Sun
      "󰖛", # mdi-weather-sunset-down
      "󰖜", # mdi-weather-sunset-up
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: current_weather_font
    size: 80
    glyphs: [
      '󰢙', # mdi-account-heart
      '󰔏', # mdi-thermometer
      '󱄷', # mdi-fire-hydrant
      "󰕊", # mdi-umbrella
      "󰽕", # mdi-home-thermometer-outline
      "󰽔", # mdi-home-thermometer
      "󰵃", # mdi-air-filter
      # Wifi
      '󰤯', # mdi-wifi-strength-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      # Weather
      "󰖙", # mdi-weather-sunny
      "󰖔", # mdi-weather-night
      "󰖐", # mdi-weather-cloudy
      "󰖖", # mdi-weather-pouring
      "󰙿", # mdi-weather-snowy-rainy
      "󰼶", # mdi-weather-snowy-heavy
      "󰖞", # mdi-weather-windy-variant
      "󰖑", # mdi-weather-fog
      "󰼱", # mdi-weather-night-partly-cloudy
      "󰖕", # mdi-weather-partly-cloudy
      # Moon
      "󰽤", # new_moon
      "󰽧", # waxing_crecent
      "󰽡", # first_quarter
      "󰽨", # waxing_gibbous
      "󰽢", # full_moon
      "󰽦", # waning_gibbous
      "󰽣", # last_quarter
      "󰽥", # waning_crescent
      # Sun
      "󰖛", # mdi-weather-sunset-down
      "󰖜", # mdi-weather-sunset-up
      ]

# 264 x 176 display
display:
  - platform: waveshare_epaper
    id: epaper
    cs_pin: GPIO2
    busy_pin: GPIO5
    reset_pin: GPIO4
    dc_pin: GPIO0
    model: 2.70in
    rotation: 270°
    # full_update_every: 30
    # 264 x 176 display
    update_interval: 3600s
    lambda: |
      int x, y;
      ESP_LOGI("display", "Updating..");

      /* Print time in HH:MM format */
      it.strftime(0, -10, id(clock_font), TextAlign::TOP_LEFT, "%I:%M", id(current_time).now());
      /* Print AM/PM */
      it.strftime(120, 15, id(status_font), TextAlign::TOP_LEFT, "%P", id(current_time).now());
      it.strftime(65, 40, id(status_font), TextAlign::TOP_LEFT, "%b %e, %Y", id(current_time).now());

      // it.line(259, -10, 259, 200);it.line(261, 0, 261, 200);it.line(260, 0, 260, 200);
      // it.line(0, 200, 259, 200);it.line(0, 201, 261, 201);it.line(0, 202, 260, 202);
      /*
      it.print(125, 120, id(temp_font), TextAlign::BASELINE_CENTER, "HELLO SUNSHINE!");
      it.print(125, 160, id(icon_font), TextAlign::BASELINE_CENTER, "󰢙");
      it.print(125, 182, id(temp_font), TextAlign::BASELINE_CENTER, "Lea & Emma"); // 400 - ((400 - 260)/2)
      */
      /* Moon icon - used to be y = 155, x = 230 */
      if(id(moon_icon).has_state()) {
        y = 165, x = 20;
        ESP_LOGI("Moon icon", "%s", id(moon_icon).state.c_str());
        it.printf(x, y, id(icon_font), TextAlign::BASELINE_CENTER, "%s", id(moon_icon).state.c_str());
      }
      /* WiFi Signal Strenght          x = 398, y = 298; */
      if(id(wifisignal).has_state()) {
        x = 175, y = 30;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰤨");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰤥");
            ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -67) {
            //Fair
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰤢");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -70) {
            //Weak
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰤟");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰤯");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }

      // Current weather
      if(id(weather_forecast_today).has_state()) {
        std::string str = id(weather_forecast_today).state;
        ESP_LOGI("Weather", "%s", str.c_str());
        std::size_t current, previous = 0;
        char delim = ';';
        current = str.find(delim);
        int y = 100, x = 5;
        for (int i=0; i<3; i++) {
            if(i == 0) {
              it.printf(x - 15, y, id(current_weather_font),
                TextAlign::BASELINE_LEFT,
                "%s", str.substr(previous, current - previous).c_str());
            } else if (i == 1) {
              ESP_LOGD("weather","%dx%d %s", (i % 1 ? 270 : 320), x,
                str.substr(previous, current - previous).c_str());
              /* it.printf(y, x, id(status_font),
                TextAlign::TOP_LEFT,
                "%s", str.substr(previous, current - previous).c_str());
              */
            } else if (i == 2) { // Chance for rain
              it.printf(x, y + 2, id(icon_font), TextAlign::TOP_LEFT, "󰕊"); // Umbrella
              it.printf(x + 30, y + 10, id(status_font),
                TextAlign::TOP_LEFT,
                "%s%%", str.substr(previous, current - previous).c_str());
            }
            // y += 100;
            previous = current + 1;
            current = str.find(delim, previous);
        }
      }

      // Print inside temperature (from homeassistant sensor)
      y = 135, x = 100;
      if (id(inside_temperature).has_state()) {
        it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "󰽕");
        it.printf(x, y + 4, id(temp_font), TextAlign::BOTTOM_LEFT , "%5.1f°", id(inside_temperature).state);
      }
      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.print(x, y + 4, id(icon_font), TextAlign::TOP_RIGHT, "󰽔"); 
        it.printf(x, y, id(temp_font), TextAlign::TOP_LEFT, "%5.1f°", id(outside_temperature).state);
      }

      // Print sniffer0 air quality index sensor (from homeassistant sensor)
      if (id(sniffer0_aqi).has_state()) {
         x = 91, y = 60;
        it.print(x + 10, y + 4, id(icon_font), TextAlign::TOP_RIGHT, "󰵃"); 
        it.printf(x - 4, y, id(temp_font), TextAlign::TOP_LEFT, "%5.0f", id(sniffer0_aqi).state);
        it.print(x + 87, y + 16, id(aqi_font), TextAlign::TOP_RIGHT, "AQI"); 

      }

      /*// Print consumer
      if (id(top_consumer).has_state()) {
        it.printf(0, 295, id(status_font), TextAlign::BOTTOM_LEFT , "Total: %.0f W, %s W", id(sparsnas).state, id(top_consumer).state.c_str());
      }
      */

      it.line(180, 0, 180, 176);
      it.line(0, 103, 180, 103);

      // std::string str = "mon:cloud:12.1:30%:tue:rain:10.2:40%:wed:sunny:18.0:0%:thu:snow:-12.2:10%";
      // Mon;;65°/53°;12%;Tue;;70°/56°;7%;Wed;;73°/55°;2%;Thu;;73°/55°;1%
      if(id(weather_forecast).has_state()) {
        std::string str = id(weather_forecast).state;
        ESP_LOGI("Weather", "%s", str.c_str());
        std::size_t current, previous = 0;
        char delim = ';';
        current = str.find(delim);
        int x = 240, y = 0;
        // changed from x = 340, y = 4
        for (int i=0; i<4; i++) {
          ESP_LOGI("t", "%d", i);
          for (int j=0; j<4; j++) {
            if(j == 1) {  // Weather icon.
              it.printf(x - 65, y + 25, id(weather_font),
                TextAlign::BASELINE_LEFT,
                "%s", str.substr(previous, current - previous).c_str());
            } else {
              ESP_LOGD("weather","%dx%d %s", (j % 1 ? 270 : 320), x,
                str.substr(previous, current - previous).c_str());
              it.printf((j == 0 ? x - 15 : 390), y,
                id(status_font),
                (j == 0 ? TextAlign::TOP_LEFT : TextAlign::TOP_RIGHT),
                "%s", str.substr(previous, current - previous).c_str());
              y += 16;
            }
            previous = current + 1;
            current = str.find(delim, previous);
          }
          y += 2;
        }
      }

# output:
#   - platform: gpio
#     id: onboard_led
#     pin:
#       number: 2
#       inverted: False

# light:
#   - platform: binary
#     name: "Onboard LED"
#     output: onboard_led

time:
  - platform: homeassistant
    id: current_time
    timezone: America/Los_Angeles
    on_time:
      # Every 1 minutes
      - seconds: 0
        then:
          - component.update: epaper

sensor:
  - platform: homeassistant
    id: inside_temperature
    entity_id: sensor.sn1_temperature
    internal: true

  - platform: homeassistant
    id: sniffer0_aqi
    entity_id: sensor.sniffer0_pm_2_5_aqi
    internal: true

  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.openweathermap_forecast_temperature
    internal: true

  # - platform: homeassistant
  #   entity_id: sensor.sparsnas_energy_consumption_momentary
  #   id: sparsnas
  #   internal: true

  - platform: homeassistant
    entity_id: sensor.dark_sky_precip_probability
    id: precip_probability
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 60s

text_sensor:
  # - platform: homeassistant
  #   id: top_consumer
  #   entity_id: sensor.iotawatt_top_consumer
  #   internal: true

  - platform: homeassistant
    name: forecast
    id: weather_forecast
    entity_id: sensor.forecast
    internal: true

  - platform: homeassistant
    name: forecast
    id: weather_forecast_today
    entity_id: sensor.forecast_today
    internal: true

  - platform: homeassistant
    id: moon_icon
    entity_id: sensor.moon_tpl
```

This was based heavily on [@fredrike's code](https://github.com/fredrike/esphome-nodes/blob/f7a3a225c417d651b4a3937708ea4d4b2d0827ed/homeassistant-config/package-display_node.yaml) and so there are still some vestigal structures of his code commented out in my code. @Fredrike, if you see this, thanks for your inspiration!

# Future hardware:

I realize that I'm pretty lucky to get ahold of a limited run piece of hardware specially made for a conference. I was hoping that I was watching YouTube while writing this post and saw [a new product from Adafruit](https://www.adafruit.com/product/4777) that this code could potentially work on in the future.

Also, [the badgy](https://www.tindie.com/products/squarofumi/badgy-iot-badge/) looks like a great alternative. 

# Display Iterations

![codecard_hello_world](//images.ctfassets.net/o4gibwve10tr/3PcSeOOy7f392aqflN7OWA/7c3d493bbb5d22174e2add6b7d0d2601/IMG_3933.jpeg)

![IMG 4021](//images.ctfassets.net/o4gibwve10tr/2mI1QQSiyIa2cT3zhRbmkh/2b8374addd74ab5cbae35cf7012755a5/IMG_4021.jpeg)

![codecard_version2](//images.ctfassets.net/o4gibwve10tr/62B49eLAgctXUbm4v1qeRW/47efa2121977eb7b2891f8377f812d06/IMG_4026.jpeg)

![codecard_version3](//images.ctfassets.net/o4gibwve10tr/56sBNoSNsXQZ5XdocjSGNK/39764ddc581f2447ce04bc205985e8d1/IMG_4193.jpeg)

![codecard_version5](//images.ctfassets.net/o4gibwve10tr/6ZeUg2gEs2LKliWUxQe7b3/6c96e666f76321dc95f1c46e98ac6990/IMG_4254.jpeg)

![codecard_version4](//images.ctfassets.net/o4gibwve10tr/1xUfwFWDIH753ct1OQAhk4/b5ecc1d21a15c4ea568602509eb55b7d/IMG_4269.jpeg)

![codecard](//images.ctfassets.net/o4gibwve10tr/3Ry5sZT37UtzGqutwEQ9w8/3e65e7a82360037de701fc37d9dbbc35/IMG_4272.jpeg)5:["$","$L10",null,{"siteInfo":{"metadata":{"tags":[],"concepts":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"o4gibwve10tr"}},"id":"1vaZauN3G1LbRsJutH3AU9","type":"Entry","createdAt":"2020-05-28T21:29:56.813Z","updatedAt":"2022-04-19T07:19:17.934Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"publishedVersion":45,"revision":18,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"siteInformation"}},"locale":"en-US"},"fields":{"siteName":"Michael Lunzer","siteUrl":"https://michaellunzer.com","logo":{"metadata":{"tags":[],"concepts":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"o4gibwve10tr"}},"id":"7yHuAa09NVOcZ25POk7cbM","type":"Asset","createdAt":"2020-05-28T21:29:46.445Z","updatedAt":"2020-07-03T23:34:40.696Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"publishedVersion":35,"revision":10,"locale":"en-US"},"fields":{"title":"ML-logo-white","file":{"url":"//images.ctfassets.net/o4gibwve10tr/7yHuAa09NVOcZ25POk7cbM/9b2cb1a82fcec0461a26b030df8ed159/ML-logo-white.png","details":{"size":31304,"image":{"width":319,"height":302}},"fileName":"ML-logo-white.png","contentType":"image/png"}}},"twiteerHandle":"@michaellunzer","siteDescription":"Personal Site","menus":["Blogs","Photos","About","Contact","Work","Map","Resume","Projects","Bucket List","Spotify"]}},"children":[null,["$","div",null,{"className":"site-container project-post","children":["$","div",null,{"className":"container","children":[["$","div",null,{"className":"feature-img","children":["$","$L12",null,{"src":"https://images.ctfassets.net/o4gibwve10tr/3Ry5sZT37UtzGqutwEQ9w8/9a4c50fa9c7f53b42c4f425c5244b5eb/IMG_4272.jpeg","alt":"ESPHome Oracle Code Card ePaper Display","width":1500,"height":800,"className":"img-fluid","style":{"objectFit":"cover","objectPosition":"50% 50%"}}]}],["$","div",null,{"className":"details","children":[["$","h1",null,{"className":"title","children":"ESPHome Oracle Code Card ePaper Display"}],["$","span",null,{"className":"date","children":[["$","i",null,{"className":"fas fa-calendar-alt"}]," ","October 20, 2020"]}],["$","$L13",null,{"content":"$14"}]]}],"$L15"]}]}]]}]
16:I[5557,["242","static/chunks/242-9ab8df8e28059c50.js","63","static/chunks/63-b8ba2254fb9ac97a.js","231","static/chunks/231-25f0858d523e67a4.js","734","static/chunks/734-311fc7453e9da4aa.js","419","static/chunks/app/projects/%5Bslug%5D/page-821d249a48c9d38a.js"],"default"]
15:["$","$L16",null,{"socialConfig":{"siteurl":"https://michaellunzer.com","twitterHandle":"@michaellunzer","config":{"url":"https://michaellunzer.com/projects/esphome-oracle-code-card-epaper-display","title":"ESPHome Oracle Code Card ePaper Display"}}}]
